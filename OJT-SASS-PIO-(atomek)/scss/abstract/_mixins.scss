@use 'colors' as *;
@mixin imgCover($ht:1px, $wd:100%){
    height: $ht;
    width: $wd;
    object-fit: cover;
}

@mixin roundedContainer($clr: $clr-light) {
    max-width: 180rem;
    padding: 0 1.6rem;
    margin: 2rem auto;
  
    background-color: $clr;
    border-radius: 7rem;
  } //rounded side

@mixin mediaQuery($width:$sm){  //$width and sm size is from color
    @media (max-width:$width){
        @content; //changed any content
    }
}
@mixin mediaQuery2($width:$md) { //tablet
    @media (max-width:$width) {
        @content;
    }
}

//mediaQuery
@mixin for-size($size) {
    @if $size == phone {
      @media (max-width: 420px) {
        @content;
      }
    } @else if $size == tablet {
      @media (max-width: 768px) {
        @content;
      }
    } @else if $size == desktop {
      @media (max-width: 1440px) {
        @content;
      }
    } @else if $size == big-desktop {
      @media (max-width: 1080px) {
        @content;
      }
    }
  }

//@include mediaQuery{}

@mixin grid($cols: 1, $gap:1rem){ //for calling grid
    display: grid;
    grid-template-columns: repeat($cols, 1fr);
    grid-gap: $gap;
}
// @include grid(1);
// gap: 2rem;
// place-items: center;

@mixin absolute ($top:0,$right:0,$bottom:0,$left:0) {
    position: absolute;
    top: $top;
    left: $left;
    bottom: $bottom;
    right: $right;
}
@mixin flex($justify:flex-start, $align: flex-start){
    display: flex;
    justify-content: $justify;
    align-items: $align;
}
@mixin unevenGrid($val: 1, $gap:1rem){ //for calling grid
    display: grid;
    grid-template-columns: $val;
    grid-gap: $gap;
}
// @include unevenGrid(1fr 1fr);
